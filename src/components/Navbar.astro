---
import LanguageSelector from "./LanguageSelector.astro";

import { getI18N } from "@/i18n";

const { currentLocale = "es" } = Astro;
const i18n = getI18N({ currentLocale });

const navItems = [
  {
    title: i18n.NAVBAR.TITLE_1,
    label: "services",
    url: "#services",
  },
  {
    title: i18n.NAVBAR.TITLE_2,
    label: "projects",
    url: "#projects",
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex md:px-3 text-sm rounded-full text-gray-200 justify-center items-center"
  >
    {
      navItems.map((item) => (
        <a
          class="text-base md:text-lg font-semibold capitalize relative block px-2 py-2 transition hover:text-blue-500"
          aria-label={item.label}
          href={item.url}
        >
          {item.title}
        </a>
      ))
    }
    <a
      href="https://mail.google.com/mail/u/0/?fs=1&tf=cm&source=mailto&to=danielmedina7778@gmail.com"
      class="text-base md:text-lg font-semibold capitalize relative block px-2 py-2 transition hover:text-blue-500"
      target="_blank"
      rel="noopener noreferrer"
      aria-label="contact">{i18n.NAVBAR.TITLE_3}</a
    >
    <LanguageSelector />
  </nav>
</header>

<script>
  const sections = document.querySelectorAll("section");
  const navItems = document.querySelectorAll("header nav a");

  const callback = (entries: any[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        navItems.forEach((item) => {
          if (item.getAttribute("aria-label") == entry.target.id) {
            item.classList.add("text-blue-500");
          } else {
            item.classList.remove("text-blue-500");
          }
        });
      }
    });
  };

  const observer = new IntersectionObserver(callback, {
    root: null,
    // rootMargin: "0px",
    threshold: 0.2,
  });

  sections.forEach((section) => {
    observer.observe(section);
  });

  // Cleanup function
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      sections.forEach((section) => {
        observer.observe(section);
      });
    }
  };
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur bg-gray-800/90 ring-white/10;
    }
  }
</style>
